# -*- coding: utf-8 -*-
"""fashion_trend_analysis

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1nkbaXqYK36RGKV1yryvt-eFfrtMaNNv7
"""

import cv2
import numpy as np
from tensorflow.keras.applications import MobileNetV2
from tensorflow.keras.applications.mobilenet_v2 import preprocess_input
from tensorflow.keras.models import Model
from sklearn.cluster import MiniBatchKMeans
from collections import deque

# Initialize MobileNetV2 for feature extraction (lighter than VGG16)
base_model = MobileNetV2(weights='imagenet', include_top=False, input_shape=(224, 224, 3))
feature_extractor = Model(inputs=base_model.input, outputs=base_model.get_layer('block_13_expand_relu').output)

# Initialize MiniBatchKMeans for online clustering
n_clusters = 5
kmeans = MiniBatchKMeans(n_clusters=n_clusters, random_state=42)

# Maintain a buffer of recent features for trend analysis
feature_buffer = deque(maxlen=100)

# Color analysis function
def get_dominant_color(image):
    pixels = cv2.resize(image, (32, 32)).reshape(-1, 3)
    pixels = np.float32(pixels)
    criteria = (cv2.TERM_CRITERIA_EPS + cv2.TERM_CRITERIA_MAX_ITER, 200, .1)
    flags = cv2.KMEANS_RANDOM_CENTERS
    _, labels, palette = cv2.kmeans(pixels, 1, None, criteria, 10, flags)
    return palette[0].astype(int)

# Trend names (you can customize these)
trend_names = ["Casual Chic", "Formal Elegance", "Sporty Active", "Bohemian Spirit", "Vintage Inspired"]

# Initialize video capture
cap = cv2.VideoCapture(0)

while True:
    ret, frame = cap.read()
    if not ret:
        break

    # Preprocess the frame
    resized_frame = cv2.resize(frame, (224, 224))
    x = preprocess_input(resized_frame)
    x = np.expand_dims(x, axis=0)

    # Extract features
    features = feature_extractor.predict(x)
    features = features.reshape(1, -1)

    # Update feature buffer and retrain kmeans
    feature_buffer.append(features[0])
    if len(feature_buffer) >= n_clusters:
        kmeans.partial_fit(np.array(feature_buffer))

    # Predict trend
    if len(feature_buffer) < n_clusters:
        trend = 0
    else:
        if not hasattr(kmeans, 'cluster_centers_'):
          kmeans.partial_fit(np.array(feature_buffer))
        trend = kmeans.predict(features)[0]


    # Get dominant color
    dominant_color = get_dominant_color(frame)

    # Display results
    cv2.putText(frame, f"Trend: {trend_names[trend]}", (10, 30), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)
    cv2.putText(frame, f"Color: RGB{tuple(dominant_color)}", (10, 60), cv2.FONT_HERSHEY_SIMPLEX, 0.7, (0, 255, 0), 2)

    # Display color swatch
    cv2.rectangle(frame, (10, 70), (50, 110), tuple(dominant_color.tolist()), -1)

    cv2.imshow('Fashion Trend Analysis', frame)

    if cv2.waitKey(1) & 0xFF == ord('q'):
        break

cap.release()
cv2.destroyAllWindows()

